// code studio


#include<bits/stdc++.h>
#include<vector>
using namespace std;
/*recursion code 
int fib(int n, vector<int> &dp) {
        if(n<=1)
        return n;

        return fib(n-1)+fib(n-2);
}
 */

//dp code == top down apporach =recursion+ memoisation
//benefit = save the data for the memosiation
// time com o(n)and space com o(n2)
//
/* 
int fib(int n, vector<int> &dp) {
        if(n<=1)
        return n;
//step 3
if(dp[n]==-1)
return dp[n];

//step 2 
        dp[n]= fib(n-1,dp)+fib(n-2,dp);
        return dp[n];
}
*/
/*
//tabulation== bottom up approach
// benefit = change in one dp array so time complexity is o(n)and space o(n)
int fib(int n, vector<int> &dp) {
dp[n-1];
dp[1]=1;
dp[0]=0;
  for (int i = 2; i <= n; i++) {
    dp[i] = dp[i - 1] + dp[i - 2];
  }
return dp[n];
}
*/


int main()
{
        /*
        *  Write your code here. 
         *  Read input as specified in the question.
         *  Print output as specified in the question.
        */
        //space optimization approach
// benefit = change in variables so time complexity is o(n)and space o(1)
        int n;
        cin>>n;
        int prev1=1;
        int prev2=0;
        for (int i = 2; i <= n; i++) {
               int  curr = prev1 + prev2;
                //shift logic
                 prev2=prev1;
                prev1=curr;
  }
                cout<<prev1;

        return 0;
        
        
}
