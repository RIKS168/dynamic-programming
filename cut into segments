#include<limits.h>

// recursion sloution 
int solve(int n, int x, int y, int z) {
   // base case 
   if(n==0)return 0;
   // if n go to the negtive no
   if(n<0)return INT_MAX;

   // recursive relation
   int a=solve( n-x,  x, y, z)+1;
   int b=solve( n-y,  x, y, z)+1;
   int c=solve( n-z,  x, y, z)+1;
    
	int ans=max(a , max(b,c));
	return ans;

}
// recursion+ memoisation sloution 
int solvemem(int n, int x, int y, int z, vector<int> &dp) {
   // base case 
   //if(n==0)return 0;
   dp[0]=0;
   // if n go to the negtive no
   if(n<0)return INT_MAX;
	if(dp[n]!=-1)return dp[n];
   // recursive relation
    int a=solvemem( n-x,  x, y, z,dp)+1;
 	int b=solvemem( n-y,  x, y, z,dp)+1;
    int c=solvemem( n-z,  x, y, z,dp)+1;
    
	dp[n]=max(a , max(b,c));
	return dp[n];

}
// tabulation sloution 
int solvetab(int n, int x, int y, int z) {
	vector<int>dp(n+1,INT_MIN);
   // base case 
   //if(n==0)return 0;
   dp[0]=0;
/*
   // recursive relation
    int a=solvemem( n-x,  x, y, z,dp)+1;
 	int b=solvemem( n-y,  x, y, z,dp)+1;
    int c=solvemem( n-z,  x, y, z,dp)+1;
    
	dp[n]=max(a , max(b,c));
	return dp[n];
*/
   for (int i = 1; i <= n; i++) {
    if(i-x>=0)dp[i]=max(dp[i],dp[i-x]+1);
    if(i-y>=0)dp[i]=max(dp[i],dp[i-y]+1);
	if(i-z>=0)dp[i]=max(dp[i],dp[i-z]+1);
   }
   if (dp[n] < 0) {
        return 0;
   } else {
        return dp[n];
   }
}

int cutSegments(int n, int x, int y, int z) {
	// recursion calling
	/*int ans=solve(n,x,y,z);
        if (ans < 0) {
          return 0;
        } else {
          return ans;
        }
		*/
	// recursion + memoization call
    /* vector<int>dp(n+1,-1);
	 int ans=solvemem(n, x, y, z,dp);
	   if (ans < 0) {
          return 0;
        } else {
          return ans;
        }
		*/
		//tabulation call
		 return solvetab(n, x, y, z);
	
        
}
